{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"stubby4node","body":"[![Build Status](https://secure.travis-ci.org/Afmrak/stubby4node.png?branch=master)](http://travis-ci.org/Afmrak/stubby4node)\r\n\r\n# Requirements\r\n\r\n* [node.js](http://nodejs.org/) (tested with v0.6.x and v0.8.x)\r\n\r\n## Packaged\r\n\r\n* [coffee-script](http://coffeescript.org)\r\n* [JS-YAML](https://github.com/nodeca/js-yaml) for loading yaml files\r\n\r\n## Optional (for debugging/testing)\r\n\r\n* [node-inspector](https://github.com/dannycoates/node-inspector)\r\n* [jasmine-node](https://github.com/mhevery/jasmine-node)\r\n\r\n# Installation\r\n\r\n## via source\r\n\r\n    git clone git://github.com/Afmrak/stubby4node.git\r\n    cd stubby4node\r\n    cake build\r\n\r\n## via npm\r\n\r\n    npm install -g stubby\r\n\r\nThis will create the executable `stubby` in the root level of the project.\r\n\r\n# Starting the Server(s)\r\n\r\nSome systems require you to `sudo` before running services on port certain ports (like 80)\r\n\r\n    [sudo] stubby\r\n\r\n# Command-line switches\r\n\r\n```\r\nstubby [-s <port>] [-a <port>] [-f <file>] [-h]\\n\r\n-s, --stub [PORT]                    Port that stub portal should run on. Defaults to 8882\r\n-a, --admin [PORT]                   Port that admin portal should run on. Defaults to 8889\r\n-f, --file [FILE.{json|yml|yaml}]    Data file to pre-load endoints.\r\n-h, --help                           This help text.\r\n```\r\n\r\n# The Admin Portal\r\n\r\nThe admin portal is a RESTful(ish) endpoint running on `localhost:8889`.\r\n\r\n## Supplying Endpoints to Stub\r\n\r\nSubmit `POST` requests to `localhost:8889` or load a file (-f) with the following structure:\r\n\r\n* `request`: describes the client's call to the server\r\n   * `method`: GET/POST/PUT/DELETE/etc.\r\n   * `url`: the URI string. GET parameters should also be included inline here\r\n   * `headers`: a key/value map of headers the server should respond to\r\n   * `post`: a string matching the textual body of the response.\r\n* `response`: describes the server's response to the client\r\n   * `headers`: a key/value map of headers the server should use in it's response\r\n   * `latency`: the time in milliseconds the server should wait before responding. Useful for testing timeouts and latency\r\n   * `body`: the textual body of the server's response to the client\r\n   * `status`: the numerical HTTP status code (200 for OK, 404 for NOT FOUND, etc.)\r\n\r\n### YAML (file only)\r\n```yaml\r\n-  request:\r\n      url: /path/to/something\r\n      method: POST\r\n      headers:\r\n         authorization: \"Basic usernamez:passwordinBase64\"\r\n      post: this is some post data in textual format\r\n   response:\r\n      headers:\r\n         Content-Type: application/json\r\n      latency: 1000\r\n      status: 200\r\n      body: You're request was successfully processed!\r\n\r\n-  request:\r\n      url: /path/to/anotherThing?a=anything&b=more\r\n      method: GET\r\n      headers:\r\n         Content-Type: application/json\r\n      post:\r\n   response:\r\n      headers:\r\n         Content-Type: application/json\r\n         Access-Control-Allow-Origin: \"*\"\r\n      status: 204\r\n      body:\r\n\r\n-  request:\r\n      url: /path/to/thing\r\n      method: POST\r\n      headers:\r\n         Content-Type: application/json\r\n      post: this is some post data in textual format\r\n   response:\r\n      headers:\r\n         Content-Type: application/json\r\n      status: 304\r\n      body:\r\n```\r\n\r\n### JSON (file or POST/PUT)\r\n```json\r\n[\r\n  {\r\n    \"request\": {\r\n      \"url\": \"/path/to/something\", \r\n      \"post\": \"this is some post data in textual format\", \r\n      \"headers\": {\r\n         \"authorization\": \"Basic usernamez:passwordinBase64\"\r\n      },\r\n      \"method\": \"POST\"\r\n    }, \r\n    \"response\": {\r\n      \"status\": 200, \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"latency\": 1000,\r\n      \"body\": \"You're request was successfully processed!\"\r\n    }\r\n  }, \r\n  {\r\n    \"request\": {\r\n      \"url\": \"/path/to/anotherThing?a=anything&b=more\", \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"post\": null, \r\n      \"method\": \"GET\"\r\n    }, \r\n    \"response\": {\r\n      \"status\": 204, \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      }, \r\n      \"body\": null\r\n    }\r\n  }, \r\n  {\r\n    \"request\": {\r\n      \"url\": \"/path/to/thing\", \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"post\": \"this is some post data in textual format\", \r\n      \"method\": \"POST\"\r\n    }, \r\n    \"response\": {\r\n      \"status\": 304, \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      }, \r\n      \"body\": null\r\n    }\r\n  }\r\n]\r\n```\r\n\r\nIf you want to load more than one endpoint via file, use either a JSON array or YAML list (-) syntax. On success, the response will contain `Content-Location` in the header with the newly created resources' location\r\n\r\n## Getting the Current List of Stubbed Responses\r\n\r\nPerforming a `GET` request on `localhost:8889` will return a JSON array of all currently saved responses. It will reply with `204 : No Content` if there are none saved.\r\n\r\nPerforming a `GET` request on `localhost:8889/<id>` will return the JSON object representing the response with the supplied id.\r\n\r\n## Change existing responses\r\n\r\nPerform `PUT` requests in the same format as using `POST`, only this time supply the id in the path. For instance, to update the response with id 4 you would `PUT` to `localhost:8889/4`.\r\n\r\n## Deleting responses\r\n\r\nSend a `DELETE` request to `localhost:8889/<id>`\r\n\r\n# The Stub Portal\r\n\r\nRequests sent to any url at `localhost` or `localhost:8882` will search through the available endpoints and, if a match is found, respond with that endpoint's `response` data\r\n\r\n# Running tests\r\n\r\nIf you don't have jasmine-node already, install it:\r\n\r\n    npm install -g jasmine-node\r\n\r\nFrom the root directory run:\r\n\r\n    jasmine-node --coffee spec\r\n\r\n# TODO\r\n\r\n* `PUT`ing multiple responses at a time.\r\n* SOAP request/response compliance\r\n* Dynamic port switching\r\n* HTTP/SSL auth mocking\r\n* Randomized responses based on supplied pattern (exploratory QA abuse)\r\n\r\n# NOTES\r\n\r\n* __Copyright__ 2012 Eric Mrak, Alexander Zagniotov, Isa Goksu\r\n* __License__ Apache v2.0\r\n\r\n","tagline":"A configurable server for stubbing external systems during development. Uses Node.js and written in Coffeescript"}