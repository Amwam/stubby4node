{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"[![Build Status](https://secure.travis-ci.org/Afmrak/stubby4node.png?branch=master)](http://travis-ci.org/Afmrak/stubby4node)\r\n\r\n# Requirements\r\n\r\n* [node.js](http://nodejs.org/) (tested with v0.8.x)\r\n\r\nPlease note that stubby4node has not been tested on any Windows platform.\r\nAs a result, color-console output may look horrendous.\r\n\r\nDevelopment is on Mac OS X Mountain Lion.\r\n\r\n## Packaged\r\n\r\n* [JS-YAML](https://github.com/nodeca/js-yaml) for loading yaml files\r\n* [cloneextend](https://github.com/shimondoodkin/nodejs-clone-extend)\r\n\r\n## Optional (for development)\r\n\r\n* [coffee-script](http://coffeescript.org)\r\n* [node-inspector](https://github.com/dannycoates/node-inspector)\r\n* [jasmine-node](https://github.com/mhevery/jasmine-node)\r\n\r\n# Installation\r\n\r\n## via source\r\n\r\nYou need to have `coffee-script` installed on your system.\r\n\r\n    git clone git://github.com/Afmrak/stubby4node.git\r\n    cd stubby4node\r\n    coffee -o lib -c src\r\n    export PATH=$PATH:./bin/stubby\r\n\r\n## via npm\r\n\r\n    npm install -g stubby\r\n\r\nThis will install `stubby` as a command in your `PATH`.\r\n\r\n# Starting the Server(s)\r\n\r\nSome systems require you to `sudo` before running services on port certain ports (like 80)\r\n\r\n    [sudo] stubby\r\n\r\n# Command-line switches\r\n\r\n```\r\nstubby [-a <port>] [-c <file>] [-d <file>] [-h] [-k <file>]\r\n       [-l <hostname>] [-s <port>] [-p <file>] [-v]\r\n\r\n-a, --admin <port>          Port for admin portal. Defaults to\r\n                            8889.\r\n-c, --cert <file>           Certificate file. Use with --key.\r\n-d, --data <file>           Data file to pre-load endoints. YAML\r\n                            or JSON format.\r\n-h, --help                  This help text.\r\n-k, --key <file>            Private key file. Use with --cert.\r\n-l, --location <hostname>   Hostname at which to bind stubby.\r\n-s, --stubs <port>           Port for stubs portal. Defaults to\r\n                            8882.\r\n-p, --pfx <file>            PFX file. Ignored if used with\r\n                            --key/--cert\r\n-v, --version               Prints stubby's version number.\r\n```\r\n\r\n# The Admin Portal\r\n\r\nThe admin portal is a RESTful(ish) endpoint running on `localhost:8889`. Or wherever you described through stubby's options.\r\n\r\n## Supplying Endpoints to Stubby\r\n\r\nSubmit `POST` requests to `localhost:8889` or load a data-file (-d) with the following structure for each endpoint:\r\n\r\n* `request`: describes the client's call to the server\r\n   * `method`: GET/POST/PUT/DELETE/etc.\r\n   * `url`: the URI string. GET parameters should also be included inline here\r\n   * `headers`: a key/value map of headers the server should respond to\r\n   * `post`: a string matching the textual body of the response.\r\n* `response`: describes the server's response to the client\r\n   * `headers`: a key/value map of headers the server should use in it's response\r\n   * `latency`: the time in milliseconds the server should wait before responding. Useful for testing timeouts and latency\r\n   * `file`: if specified, returns the contents of the given file as the response body. If the file cannot be found at request time, `body` is used instead\r\n   * `body`: the textual body of the server's response to the client\r\n   * `status`: the numerical HTTP status code (200 for OK, 404 for NOT FOUND, etc.)\r\n\r\n### YAML (file only)\r\n```yaml\r\n-  request:\r\n      url: /path/to/something\r\n      method: POST\r\n      headers:\r\n         authorization: \"Basic usernamez:passwordinBase64\"\r\n      post: this is some post data in textual format\r\n   response:\r\n      headers:\r\n         Content-Type: application/json\r\n      latency: 1000\r\n      status: 200\r\n      body: You're request was successfully processed!\r\n\r\n-  request:\r\n      url: /path/to/anotherThing?a=anything&b=more\r\n      method: GET\r\n      headers:\r\n         Content-Type: application/json\r\n      post:\r\n   response:\r\n      headers:\r\n         Content-Type: application/json\r\n         Access-Control-Allow-Origin: \"*\"\r\n      status: 204\r\n      file: path/to/page.html\r\n\r\n-  request:\r\n      url: /path/to/thing\r\n      method: POST\r\n      headers:\r\n         Content-Type: application/json\r\n      post: this is some post data in textual format\r\n   response:\r\n      headers:\r\n         Content-Type: application/json\r\n      status: 304\r\n```\r\n\r\n### JSON (file or POST/PUT)\r\n```json\r\n[\r\n  {\r\n    \"request\": {\r\n      \"url\": \"/path/to/something\", \r\n      \"post\": \"this is some post data in textual format\", \r\n      \"headers\": {\r\n         \"authorization\": \"Basic usernamez:passwordinBase64\"\r\n      },\r\n      \"method\": \"POST\"\r\n    }, \r\n    \"response\": {\r\n      \"status\": 200, \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"latency\": 1000,\r\n      \"body\": \"You're request was successfully processed!\"\r\n    }\r\n  }, \r\n  {\r\n    \"request\": {\r\n      \"url\": \"/path/to/anotherThing?a=anything&b=more\", \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"post\": null, \r\n      \"method\": \"GET\"\r\n    }, \r\n    \"response\": {\r\n      \"status\": 204, \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      }, \r\n      \"file\": \"path/to/page.html\"\r\n    }\r\n  }, \r\n  {\r\n    \"request\": {\r\n      \"url\": \"/path/to/thing\", \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"post\": \"this is some post data in textual format\", \r\n      \"method\": \"POST\"\r\n    }, \r\n    \"response\": {\r\n      \"status\": 304, \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      } \r\n    }\r\n  }\r\n]\r\n```\r\n\r\nIf you want to load more than one endpoint via file, use either a JSON array or YAML list (-) syntax. On success, the response will contain `Location` in the header with the newly created resources' location\r\n\r\n## Getting the Current List of Stubbed Endpoints\r\n\r\nPerforming a `GET` request on `localhost:8889` will return a JSON array of all currently saved responses. It will reply with `204 : No Content` if there are none saved.\r\n\r\nPerforming a `GET` request on `localhost:8889/<id>` will return the JSON object representing the response with the supplied id.\r\n\r\n## Changing existing responses\r\n\r\nPerform `PUT` requests in the same format as using `POST`, only this time supply the id in the path. For instance, to update the response with id 4 you would `PUT` to `localhost:8889/4`.\r\n\r\n## Deleting responses\r\n\r\nSend a `DELETE` request to `localhost:8889/<id>`\r\n\r\n# The Stubs Portal\r\n\r\nRequests sent to any url at `localhost:8882` (or wherever you told stubby to run) will search through the available endpoints and, if a match is found, respond with that endpoint's `response` data\r\n\r\n# Programmatic API\r\n\r\n## The Stubby module\r\n\r\nAdd `stubby` as a module within your project's directory:\r\n\r\n```\r\n    npm install stubby\r\n```\r\n\r\nThen within your project files you can do something like:\r\n\r\n```javascript\r\n    var Stubby = require('stubby').Stubby;\r\n    var mockExternalService = new Stubby();\r\n\r\n    mockService.start();\r\n```\r\n\r\nWhat can I do with it, you ask? Read on!\r\n\r\n### start(options, [callback])\r\n\r\n* `options`: an object containing parameters with which to start this stubby. Parameters go along with the full-name flags used from the command line.\r\n   * `stubs`: port number to run the stubs portal\r\n   * `admin`: port number to run the admin portal\r\n   * `data`: JavaScript Object/Array containing endpoint data\r\n   * `location`: address/hostname at which to run stubby\r\n   * `key`: keyfile contents (in PEM format)\r\n   * `cert`: certificate file contents (in PEM format)\r\n   * `pfx`: pfx file contents (mutually exclusive with key/cert options)\r\n* `callback`: takes one parameter: the error message (if there is one), undefined otherwise\r\n\r\n### start([callback])\r\nIdentical to previous signature, only all options are assumed to be defaults.\r\n\r\n### stop()\r\ncloses the connections and ports being used by stubby's stubs and admin portals\r\n\r\n### get(id, callback)\r\nSimulates a GET request to the admin portal, with the callback receiving the resultant data.\r\n\r\n* `id`: the id of the endpoint to retrieve. If ommitted, an array of all registered endpoints is passed the callback.\r\n* `callback(err, endpoint)`: `err` is defined if no endpoint exists with the given id. Else, `endpoint` is populated.\r\n\r\n### get(callback)\r\nSimulates a GET request to the admin portal, with the callback receiving the resultant data.\r\n\r\n* `id`: the id of the endpoint to retrieve. If ommitted, an array of all registered endpoints is passed the callback.\r\n* `callback(endpoints)`: takes a single parameter containing an array of returned results. Empty if no endpoints are registered\r\n\r\n### post(data, [callback])\r\n* `data`: an endpoint object to store in stubby\r\n* `callback(err, endpoint)`: if all goes well, gets executed with the created endpoint. If there is an error, gets called with the error message.\r\n\r\n### put(id, data, [callback])\r\n* `id`: id of the endpoint to update.\r\n* `data`: data with which to replace the endpoint.\r\n* `callback(err)`: executed with no passed parameters if successful. Else, passed the error message.\r\n\r\n### delete([id], callback)\r\n* `id`: id of the endpoint to destroy. If ommitted, all endoints are cleared from stubby.\r\n* `callback()`: called after the endpoint has been removed\r\n\r\n### Example (coffeescript)\r\n```coffeescript\r\nStubby = require('stubby').Stubby\r\n\r\nstubby1 = new Stubby()\r\nstubby2 = new Stubby()\r\n\r\nstubby1.start\r\n   stubs: 80\r\n   admin: 81\r\n   location: 'localhost'\r\n\r\nstubby2.start\r\n   stubs: 82\r\n   admin: 83\r\n   location: '127.0.0.2'\r\n```\r\n\r\n# Running Tests\r\n\r\nIf you don't have `jasmine-node` already, install it:\r\n\r\n    npm install -g jasmine-node\r\n\r\nFrom the root directory run:\r\n\r\n    jasmine-node --coffee spec\r\n\r\nIf you want to see more informative output:\r\n\r\n    jasmine-node --verbose --coffee spec\r\n\r\n# See Also\r\n\r\n**[stubby4j](https://github.com/azagniotov/stubby4j):** A java implementation of stubby\r\n\r\n# TODO\r\n\r\n* Better callback handling with programmatic API\r\n* SOAP request/response compliance\r\n* Randomized responses based on supplied pattern (exploratory QA abuse)\r\n* On-the-fly changes of endpoint properties, such as changing an endpoint's url without resubmitting the endpoint's entire JSON string to the admin portal.\r\n* Minify js in `npm` module?\r\n\r\n# NOTES\r\n\r\n* __Copyright__ 2012 Eric Mrak, Alexander Zagniotov, Isa Goksu\r\n* __License__ Apache v2.0\r\n\r\n","name":"stubby4node","tagline":"A configurable server for stubbing external systems during development. Uses Node.js and written in Coffeescript"}